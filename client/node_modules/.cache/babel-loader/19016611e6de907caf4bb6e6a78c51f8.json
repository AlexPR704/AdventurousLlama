{"ast":null,"code":"//Needed for Redux\n//Import dependencies and action definitions from types.js\n// Use axios to make HTTPRequests within certain action\n// Use dispatch to send actions to our reducers\nimport axios from\"axios\";import setAuthToken from\"../utils/setAuthToken\";import jwt_decode from\"jwt-decode\";import{GET_ERRORS,SET_CURRENT_USER,USER_LOADING}from\"./types\";// Register User\nexport const registerUser=(userData,history)=>dispatch=>{axios.post(\"/api/users/register\",userData).then(res=>history.push(\"/login\"))// re-direct to login on successful register\n.catch(err=>dispatch({type:GET_ERRORS,payload:err.response.data}));};// Login - get user token\nexport const loginUser=userData=>dispatch=>{axios.post(\"/api/users/login\",userData).then(res=>{// Save to localStorage\n// Set token to localStorage\nconst token=res.data.token;localStorage.setItem(\"jwtToken\",token);// Set token to Auth header\nsetAuthToken(token);// Decode token to get user data\nconst decoded=jwt_decode(token);// Set current user\ndispatch(setCurrentUser(decoded));}).catch(err=>dispatch({type:GET_ERRORS,payload:err.response.data}));};// Set logged in user\nexport const setCurrentUser=decoded=>{return{type:SET_CURRENT_USER,payload:decoded};};// User loading\nexport const setUserLoading=()=>{return{type:USER_LOADING};};// Log user out\nexport const logoutUser=()=>dispatch=>{// Remove token from local storage\nlocalStorage.removeItem(\"jwtToken\");// Remove auth header for future requests\nsetAuthToken(false);// Set current user to empty object {} which will set isAuthenticated to false\ndispatch(setCurrentUser({}));};","map":{"version":3,"sources":["/Users/debbie/Documents/AdventurousLlama/client/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","loginUser","token","localStorage","setItem","decoded","setCurrentUser","setUserLoading","logoutUser","removeItem"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,YAAP,KAAyB,uBAAzB,CACA,MAAOC,CAAAA,UAAP,KAAuB,YAAvB,CACA,OACEC,UADF,CAEEC,gBAFF,CAGEC,YAHF,KAIO,SAJP,CAKA;AACA,MAAO,MAAMC,CAAAA,YAAY,CAAG,CAACC,QAAD,CAAWC,OAAX,GAAuBC,QAAQ,EAAI,CAC7DT,KAAK,CACFU,IADH,CACQ,qBADR,CAC+BH,QAD/B,EAEGI,IAFH,CAEQC,GAAG,EAAIJ,OAAO,CAACK,IAAR,CAAa,QAAb,CAFf,CAEuC;AAFvC,CAGGC,KAHH,CAGSC,GAAG,EACRN,QAAQ,CAAC,CACPO,IAAI,CAAEb,UADC,CAEPc,OAAO,CAAEF,GAAG,CAACG,QAAJ,CAAaC,IAFf,CAAD,CAJZ,EASD,CAVM,CAWP;AACA,MAAO,MAAMC,CAAAA,SAAS,CAAGb,QAAQ,EAAIE,QAAQ,EAAI,CAC/CT,KAAK,CACFU,IADH,CACQ,kBADR,CAC4BH,QAD5B,EAEGI,IAFH,CAEQC,GAAG,EAAI,CACX;AACN;AAFiB,KAGHS,CAAAA,KAHG,CAGOT,GAAG,CAACO,IAHX,CAGHE,KAHG,CAIXC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAiCF,KAAjC,EACA;AACApB,YAAY,CAACoB,KAAD,CAAZ,CACA;AACA,KAAMG,CAAAA,OAAO,CAAGtB,UAAU,CAACmB,KAAD,CAA1B,CACA;AACAZ,QAAQ,CAACgB,cAAc,CAACD,OAAD,CAAf,CAAR,CACD,CAbH,EAcGV,KAdH,CAcSC,GAAG,EACRN,QAAQ,CAAC,CACPO,IAAI,CAAEb,UADC,CAEPc,OAAO,CAAEF,GAAG,CAACG,QAAJ,CAAaC,IAFf,CAAD,CAfZ,EAoBD,CArBM,CAsBP;AACA,MAAO,MAAMM,CAAAA,cAAc,CAAGD,OAAO,EAAI,CACvC,MAAO,CACLR,IAAI,CAAEZ,gBADD,CAELa,OAAO,CAAEO,OAFJ,CAAP,CAID,CALM,CAMP;AACA,MAAO,MAAME,CAAAA,cAAc,CAAG,IAAM,CAClC,MAAO,CACLV,IAAI,CAAEX,YADD,CAAP,CAGD,CAJM,CAKP;AACA,MAAO,MAAMsB,CAAAA,UAAU,CAAG,IAAMlB,QAAQ,EAAI,CAC1C;AACAa,YAAY,CAACM,UAAb,CAAwB,UAAxB,EACA;AACA3B,YAAY,CAAC,KAAD,CAAZ,CACA;AACAQ,QAAQ,CAACgB,cAAc,CAAC,EAAD,CAAf,CAAR,CACD,CAPM","sourcesContent":["//Needed for Redux\n//Import dependencies and action definitions from types.js\n// Use axios to make HTTPRequests within certain action\n// Use dispatch to send actions to our reducers\n\nimport axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport {\n  GET_ERRORS,\n  SET_CURRENT_USER,\n  USER_LOADING\n} from \"./types\";\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n  axios\n    .post(\"/api/users/register\", userData)\n    .then(res => history.push(\"/login\")) // re-direct to login on successful register\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n  axios\n    .post(\"/api/users/login\", userData)\n    .then(res => {\n      // Save to localStorage\n// Set token to localStorage\n      const { token } = res.data;\n      localStorage.setItem(\"jwtToken\", token);\n      // Set token to Auth header\n      setAuthToken(token);\n      // Decode token to get user data\n      const decoded = jwt_decode(token);\n      // Set current user\n      dispatch(setCurrentUser(decoded));\n    })\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n// Set logged in user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n// User loading\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\n// Log user out\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n};\n"]},"metadata":{},"sourceType":"module"}